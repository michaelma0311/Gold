/*
ID: michael504
LANG: C++
TASK: frac1
*/
#include "stdc++.h"
using namespace std;
ios_base::sync_with_stdio(false);
cin.tie(NULL);

freopen("timeline.in","r",stdin);
freopen("timeline.out","w",stdout);

ll fac[MX], ifac[MX];

ll binpow(ll a, ll b = mod - 2){

 for(int i = 1; i<=b; i*=2){

  if(i&b) (ans *= a) %= mod;

  (a *= a) %= mod;

 }

 return ans;

}



void precomp(int n){

 fac[0] = 1;

 for(int i = 1; i<=n; i++){

  fac[i] = 1ll*i*fac[i-1]%mod;

 }

 ifac[n] = binpow(fac[n]);

 for(int i = n; i>=1; i--){

  ifac[i-1] = 1ll*i*ifac[i]%mod;

 }

 assert(ifac[0] == 1);

}



ll choose(ll a, ll b){

 if(a -b < 0 || b < 0) return 0;

 return fac[a]*ifac[b]%mod*ifac[a-b]%mod;

}
INDEXED SET (SORTING, and BISECT)
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;               // for policy-based data structures
using namespace std;

typedef tree<int, null_type, less<int>, rb_tree_tag,
             tree_order_statistics_node_update>
    indexed_set;
DSU CODE

struct DSU {
vector<int> e;
void init(int n) { e = vector<int>(n, -1); }
int get(int x) { return e[x] < 0 ? x : e[x] = get(e[x]); };
bool sameSet(int x, int y) { return get(x) == get(y); };
int size(int x) { return -e[get(x)]; }
bool unite(int x, int y) {
x = get(x), y = get(y);
if (x == y) return false;
if (e[x] > e[y]) swap(x, y);
e[x] += e[y];
e[y] = x;
return true;
}
};
SEGMENT TREE (SUM FROM RANGE L-R)

template <class T> struct Seg {
int n;
const T ID = 0;
vector<T> seg;

T comb(T a, T b) { return a + b; }

void init(int _n) {
n = _n;
seg.assign(2 * n, ID);
}

void pull(int p) { seg[p] = comb(seg[2 * p], seg[2 * p + 1]); }

// update the value at position p
void upd(int p, T val) {
seg[p += n] = val;

for (p /= 2; p; p /= 2) { pull(p); }
}

// get the sum on the interval [l, r]
T query(int l, int r) {
T ra = ID, rb = ID;
for (l += n, r += n + 1; l < r; l /= 2, r /= 2) {
if (l & 1) ra = comb(ra, seg[l++]);
if (r & 1) rb = comb(seg[--r], rb);
}
return comb(ra, rb);
}
};

BINARY INDEXED TREE (BETTER VERSION OF PREFIX SUMS)

int sum(int k){ //sum a[1 ... k]

   int ans = 0;

   while(k > 0){

     ans += BIT[k];

     k -= k&-k;

   }

   return ans;

}





void update(int k, int v){ // a[k] += v

   while(k <= n){

      BIT[k] += v;

      k += k&-k;

   }

}

template <class T> class BIT {
  private:
int size;
vector<T> bit;
vector<T> arr;

  public:
BIT(int size) : size(size), bit(size + 1), arr(size) {}

void set(int ind, int val) { add(ind, val - arr[ind]); }

void add(int ind, int val) {
arr[ind] += val;
ind++;
for (; ind <= size; ind += ind & -ind) { bit[ind] += val; }
}

T pref_sum(int ind) {
ind++;
T total = 0;
for (; ind > 0; ind -= ind & -ind) { total += bit[ind]; }
return total;
}
};

HASHED STRING
class HashedString {
  public:
// change M and B if you want
static const ll M = (1LL << 61) - 1;
static const ll B;
static __int128 mul(ll a, ll b) { return (__int128)a * b; }
static ll mod_mul(ll a, ll b) { return mul(a, b) % M; }

  private:
// pow[i] contains P^i % M
static vector<ll> pow;

// p_hash[i] is the hash of the first i characters of the given string
vector<ll> p_hash;

  public:
HashedString(const string &s) : p_hash(s.size() + 1) {
while (pow.size() < s.size()) { pow.push_back(mod_mul(pow.back(), B)); }
p_hash[0] = 0;
for (int i = 0; i < s.size(); i++) {
p_hash[i + 1] = (mul(p_hash[i], B) + s[i]) % M;
}
}

ll get_hash(int start, int end) {
ll raw_val =
   p_hash[end + 1] - mod_mul(p_hash[start], pow[end - start + 1]);
return (raw_val + M) % M;
}
};

bool cmp(const pair<int, pair<int, int>> &a,
         const pair<int, pair<int, int>> &b) {
return a.second.second > b.second.second;
}

freopen("triangles.in","r",stdin);
freopen("triangles.out","w",stdout);


diagonal prefix sums
for (int i = 1; i < 1500; i++) {
for (int j = i - 1; j >= 1; j--) {
            //cout << j << ' ' << i-j << endl;
a[j][i - j] = a[j - 1][i - j] + a[j][i - j - 1] - a[j - 1][i - j - 1] + curr * curr;
ans[curr] = a[j][i - j];
curr++;
}
}



int isprime(int n)
{
int i;

if(n == 2)
return 1;

if(n%2 == 0)
return 0;

for(i=3; i*i <= n; i+=2)
if(n%i == 0)
return 0;

return 1;
}

 with open('planting.out', 'w') as f:
        f.write(str(answer) + '\n')

fin = open('planting.in')


#python
https://csacademy.com/app/graph_editor/


modular inverse

// C++ program to find modular inverse of A under modulo M
// This program works only if M is prime.
#include <bits/stdc++.h>
using namespace std;

// To find GCD of a and b
int gcd(int a, int b);

// To compute x raised to power y under modulo M
int power(int x, unsigned int y, unsigned int M);

// Function to find modular inverse of a under modulo M
// Assumption: M is prime
void modInverse(int A, int M)
{
    int g = gcd(A, M);
    if (g != 1)
        cout << "Inverse doesn't exist";
    else {
        // If a and m are relatively prime, then modulo
        // inverse is a^(m-2) mode m
        cout << "Modular multiplicative inverse is "
             << power(A, M - 2, M);
    }
}

// To compute x^y under modulo m
long long power(long long x, long long y, long long M)
{
    if (y == 0)
        return 1;

    long long p = power(x, y / 2, M) % M;
    p = (p * p) % M;

    return (y % 2 == 0) ? p : (x * p) % M;
}
// Function to return gcd of a and b
int gcd(int a, int b)
{
    if (a == 0)
        return b;
    return gcd(b % a, a);
}